import Data.List

type Operator = Double -> Double -> Double 
type Bind = (String, Operator)

allBindedOperations :: [Bind]
allBindedOperations = [("+", (+)),
                       ("-", (-)),
                       ("*", (*)),
                       ("/", (/))]
            
data Tree = Node Operator Tree Tree | Leaf Double 

calc :: [String] -> Double
calc expr = evaluate (createTree expr)

createTree :: [String] -> Tree
createTree expr = case lastInArr expr allBindedOperations of
                (Just (index, op)) -> (Node 
                                   (op)
                                   (createTree (take index expr))
                                   (createTree (drop (index + 1) expr)))
                Nothing -> Leaf (read (head expr) :: Double)

lastInArr:: [String] -> [Bind] -> Maybe (Int,Operator)
lastInArr _ [] = Nothing
lastInArr expr ((opName, op):xs)= case elemIndex opName expr of
                                (Just index) -> (Just (index,op))
                                Nothing -> lastInArr expr xs

evaluate:: Tree -> Double
evaluate tree = case tree of 
                    Leaf value ->  value
                    Node op left right -> ((op $ (evaluate left)) (evaluate right))